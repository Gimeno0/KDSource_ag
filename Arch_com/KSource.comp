/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Distrib2McStas_window
*
* %I
* Written by: 
* Date: 
* Origin: 
*
* Neutron guide.
*
* %D
* Description
*
* Example: Distrib2McStas_window(...)
*
* %VALIDATION
*
* %BUGS
*
* %P
* INPUT PARAMETERS:
*
* file_d1: [str]    File with current distribution in E
* file_d2: [str]    File with current distribution in E, x, y
* file_d3: [str]    File with current distribution in E, x, y, mu
* file_d4: [str]    File with current distribution in E, x, y, mu, phi
*
* %D
* Example values:
*
* %E
*******************************************************************************/

DEFINE COMPONENT KSource
DEFINITION PARAMETERS ()
SETTING PARAMETERS (string filename, string format="PTRAC",
	bw_u=0.0, bw_x=0.0, bw_y=0.0, bw_mu=0.0, bw_phi=0.0, string bwfilename=NULL, variable_bw=0,
	trasl_x=0.0, trasl_y=0.0, trasl_z=0.0,
	rot_x=0.0, rot_y=0.0, rot_z=0.0, switch_x2z=1)
OUTPUT PARAMETERS (I, p2, N)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 

SHARE
%{
	%include "ksource"
	%include "metrics"
	%include "plists"
	%include "aux"
%}

DECLARE
%{
	char pt;
	Part part;
	double w;
	int N;
	double I, p2;
    
    double trasl[3];
    double rot[3];
    ReadFun readfun;
    PList* plist;

    int dims[3] = {1, 2, 2};
    double bw_E[1];
    double bw_pos[2];
    double bw_dir[2];
    double* bw[3] = {bw_E, bw_pos, bw_dir};
    PerturbFun perturb[] = {Let_perturb, SurfXY_perturb, Polar_perturb};
    Metric* metric;
	KSource *ksource;
%}

INITIALIZE
%{  
    trasl[0] = trasl_x; trasl[1] = trasl_y; trasl[2] = trasl_z;
    rot[0] = rot_x; rot[1] = rot_y; rot[2] = rot_z;
	if(strcmp(format, "PTRAC") == 0) readfun = PTRAC_read;
	else if(strcmp(format, "SSV") == 0) readfun = SSV_read;
	else{
		printf("KSource %s: Invalid format", NAME_CURRENT_COMP);
	}
	plist = PListSimple_create('n', trasl, rot, switch_x2z, filename, readfun);

    bw_E[0] = bw_u;
    bw_pos[0] = bw_x; bw_pos[1] = bw_y;
    bw_dir[0] = bw_mu; bw_dir[1] = bw_phi;
    metric = MetricSepVar_create(dims, bw, bwfilename, variable_bw, perturb, NULL, NULL, NULL);

	ksource = KS_create(1, plist, metric);
%}

TRACE
%{
	double v;
	KS_sample(ksource, &pt, &part, &w, 1);
	I += w;
	p2 += w*w;
	N++;

	x = part.pos[0]/100;
	y = part.pos[1]/100;
	z = part.pos[2]/100;
	v = SE2V*sqrt(part.E*1E9);
	vx = v*part.dir[0];
	vy = v*part.dir[1];
	vz = v*part.dir[2];
	sx = 0;
	sy = 0;
	sz = 0;
	t = 0;
	p = w;

	SCATTER;

%}

SAVE
%{
	printf("KSource %s: I err N %lf %lf %d\n", NAME_CURRENT_COMP, I, sqrt(p2), N);
%}

FINALLY
%{
	KS_destroy(ksource);
%}

MCDISPLAY
%{
	multiline(5,
    	-1.0, -1.0, 0.0,
    	 1.0, -1.0, 0.0,
    	 1.0,  1.0, 0.0,
    	-1.0,  1.0, 0.0,
    	-1.0, -1.0, 0.0);
%}

END
